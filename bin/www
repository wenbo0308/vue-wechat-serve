#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vue-wechat-serve:server');
var http = require('http');
const Ws = require('../methods/ws_method.js')
const ws = new Ws();
// var WebSocket = require('ws')
// var Jwt = require('../methods/jwt_method.js');
// const jwt_method = new Jwt();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

ws.initWebsocket(server);
// const WebSocketServer = WebSocket.Server;
// let socketVerify = (info) => {
//   // console.log(JSON.stringify(info.req));

//   return true;
// }
// const wss = new WebSocketServer({server,clientTracking:true,verifyClient:socketVerify});
// let webSockets = {};
// wss.on('connection',async (webSocket,req) => {
//   console.log('reqreqreq',req.headers.cookie)
//   console.log(`[SERVER] connection()`);
//   if(req.headers.cookie){
//     var user = await jwt_method.getUserId(req.headers.cookie);
//   }
//   webSockets[user.user_id] = webSocket;
//   console.log(webSockets)
//   webSocket.on('message',(msg) => {
//     console.log(`server received: ${msg}`)
//     let reqObj = JSON.parse(msg);
//     let user_ws = webSockets[reqObj.u_id];
//     if(user_ws){
//       user_ws.send(reqObj.msg,(err) => { 
//         if(err){console.log(`[server] error: ${err}`)}
//         else{console.log('send success')}
//       })
//     }
//     // ws.send(reqObj.msg,(err) => { 
//     //  if(err){console.log(`[server] error: ${err}`)}
//     //  else{console.log('send success')}
//     // })
    
//   })
  
  
// })
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('The service is running,listening on port: '+ addr.port)
}
